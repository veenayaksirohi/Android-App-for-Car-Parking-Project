name: Run Android App for 1 Minute
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-app:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: '9477386'
          build-tools-version: '34.0.0'
          platform-version: '34'
          accept-licenses: true
          
      - name: Add build tools to PATH
        run: |
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Build APK
        run: ./gradlew assembleDebug
        
      - name: Enable KVM acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          
      - name: Create lightweight AVD
        run: |
          # Use Android 28 (faster boot) with minimal Google APIs
          sdkmanager "system-images;android-28;default;x86_64"
          echo "no" | avdmanager create avd -n test_device -k "system-images;android-28;default;x86_64" \
            --device "pixel_2" --force
          
      - name: Start emulator with maximum speed optimization
        run: |
          export ANDROID_HOME=$ANDROID_SDK_ROOT
          export PATH=$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools
          
          # Start emulator with aggressive speed optimizations
          $ANDROID_HOME/emulator/emulator -avd test_device \
            -no-window \
            -no-audio \
            -no-boot-anim \
            -no-snapshot \
            -no-skin \
            -camera-back none \
            -camera-front none \
            -memory 1536 \
            -partition-size 512 \
            -cores 2 \
            -accel on \
            -gpu swiftshader_indirect \
            -netdelay none \
            -netspeed full \
            -qemu -m 1536 &
            
          echo "Emulator started with PID: $!"
          
      - name: Wait for emulator (60s timeout)
        timeout-minutes: 1
        run: |
          echo "Waiting for emulator to boot (60s max)..."
          
          # Wait for ADB connection
          timeout 45s bash -c 'until adb devices | grep -q "emulator.*device"; do sleep 2; done'
          
          echo "ADB connected, waiting for boot..."
          
          # Wait for boot completion - simplified check
          for i in {1..15}; do
            # Check multiple boot indicators
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r\n ' || echo "0")
            dev_bootcomplete=$(adb shell getprop dev.bootcomplete 2>/dev/null | tr -d '\r\n ' || echo "0")
            
            echo "Boot check $i/15... sys.boot_completed=$boot_completed, dev.bootcomplete=$dev_bootcomplete"
            
            # Check if either boot indicator shows completion
            if [ "$boot_completed" = "1" ] || [ "$dev_bootcomplete" = "1" ]; then
              echo "‚úÖ Emulator ready! Boot completed in $((i*3)) seconds"
              
              # Give emulator a moment to stabilize
              sleep 2
              
              # Disable animations for faster interaction
              adb shell settings put global window_animation_scale 0 2>/dev/null || true
              adb shell settings put global transition_animation_scale 0 2>/dev/null || true  
              adb shell settings put global animator_duration_scale 0 2>/dev/null || true
              
              # Unlock screen and dismiss any dialogs
              adb shell input keyevent 82 2>/dev/null || true
              adb shell input keyevent 4 2>/dev/null || true
              
              echo "‚úÖ Emulator setup complete"
              break
            fi
            
            if [ $i -eq 15 ]; then
              echo "‚ùå Emulator boot timeout after 45 seconds"
              echo "Debug info:"
              adb devices -l
              echo "Boot properties:"
              adb shell getprop | grep -E "(boot|init)" | head -10
              exit 1
            fi
            
            sleep 3
          done
          
      - name: Install and run app for 1 minute
        timeout-minutes: 2
        run: |
          # Build and install APK faster
          adb install -r app/build/outputs/apk/debug/app-debug.apk
          
          # Extract package info using multiple methods
          APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
          
          # Method 1: Try aapt2 first (newer)
          if command -v aapt2 >/dev/null 2>&1; then
            echo "Using aapt2..."
            PACKAGE_NAME=$(aapt2 dump badging "$APK_PATH" 2>/dev/null | grep "^package:" | sed -n "s/.*name='\([^']*\)'.*/\1/p")
            MAIN_ACTIVITY=$(aapt2 dump badging "$APK_PATH" 2>/dev/null | grep "launchable-activity:" | sed -n "s/.*name='\([^']*\)'.*/\1/p")
          # Method 2: Try aapt
          elif command -v aapt >/dev/null 2>&1; then
            echo "Using aapt..."
            PACKAGE_NAME=$(aapt dump badging "$APK_PATH" 2>/dev/null | grep "^package:" | sed -n "s/.*name='\([^']*\)'.*/\1/p")
            MAIN_ACTIVITY=$(aapt dump badging "$APK_PATH" 2>/dev/null | grep "launchable-activity:" | sed -n "s/.*name='\([^']*\)'.*/\1/p")
          # Method 3: Use ADB to get package info after install
          else
            echo "Using ADB method..."
            # Get the most recently installed package
            PACKAGE_NAME=$(adb shell pm list packages -3 | tail -1 | cut -d: -f2 | tr -d '\r\n')
            # Get launchable activity
            MAIN_ACTIVITY=$(adb shell cmd package resolve-activity --brief "$PACKAGE_NAME" | tail -1 | tr -d '\r\n')
          fi
          
          # Fallback: Use common Android package structure
          if [ -z "$PACKAGE_NAME" ] || [ -z "$MAIN_ACTIVITY" ]; then
            echo "Using fallback method..."
            # Try to find from build.gradle or AndroidManifest.xml
            if [ -f "app/build.gradle" ]; then
              PACKAGE_NAME=$(grep "applicationId" app/build.gradle | sed -n 's/.*applicationId[[:space:]]*["'\'']\([^"'\'']*\)["'\''].*/\1/p' | head -1)
            fi
            
            # Default main activity pattern
            if [ -n "$PACKAGE_NAME" ] && [ -z "$MAIN_ACTIVITY" ]; then
              MAIN_ACTIVITY="${PACKAGE_NAME}.MainActivity"
            fi
          fi
          
          echo "üì± Package: '$PACKAGE_NAME'"
          echo "üöÄ Activity: '$MAIN_ACTIVITY'"
          
          # Validate we have both values
          if [ -z "$PACKAGE_NAME" ] || [ -z "$MAIN_ACTIVITY" ]; then
            echo "‚ùå Could not determine package name or main activity"
            echo "Package name: '$PACKAGE_NAME'"
            echo "Main activity: '$MAIN_ACTIVITY'"
            echo "Listing installed packages:"
            adb shell pm list packages -3
            exit 1
          fi
          
          # Clear any previous app data and launch
          adb shell pm clear "$PACKAGE_NAME" 2>/dev/null || true
          
          # Launch the app with error handling
          echo "üöÄ Launching $PACKAGE_NAME/$MAIN_ACTIVITY..."
          if ! adb shell am start -W -n "$PACKAGE_NAME/$MAIN_ACTIVITY"; then
            echo "‚ùå Failed to launch with full activity name, trying alternatives..."
            
            # Try different activity name formats
            for activity_suffix in "MainActivity" ".MainActivity" ".ui.MainActivity" ".activities.MainActivity"; do
              echo "Trying: $PACKAGE_NAME/$activity_suffix"
              if adb shell am start -W -n "$PACKAGE_NAME/$activity_suffix" 2>/dev/null; then
                MAIN_ACTIVITY="$activity_suffix"
                echo "‚úÖ Launched with: $MAIN_ACTIVITY"
                break
              fi
            done
          fi
          
          # Quick verification
          sleep 3
          if adb shell pidof "$PACKAGE_NAME" > /dev/null; then
            echo "‚úÖ App launched successfully"
          else
            echo "‚ùå App launch failed, checking logs..."
            adb logcat -d | grep -E "(FATAL|AndroidRuntime|$PACKAGE_NAME)" | tail -10
            exit 1
          fi
          
          # Run for exactly 60 seconds with minimal overhead
          echo "‚è±Ô∏è  Running app for 60 seconds..."
          start_time=$(date +%s)
          
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            
            if [ $elapsed -ge 60 ]; then
              echo "‚úÖ App completed 60-second run"
              break
            fi
            
            # Check app health every 10 seconds
            if [ $((elapsed % 10)) -eq 0 ] && [ $elapsed -gt 0 ]; then
              if adb shell pidof "$PACKAGE_NAME" > /dev/null; then
                echo "üì± App running... ${elapsed}s/60s"
                # Light interaction every 15 seconds
                if [ $((elapsed % 15)) -eq 0 ]; then
                  adb shell input tap 400 800 2>/dev/null &
                fi
              else
                echo "‚ö†Ô∏è  App crashed at ${elapsed}s"
                adb logcat -d | grep -E "(FATAL|AndroidRuntime|$PACKAGE_NAME)" | tail -5
                break
              fi
            fi
            
            sleep 1
          done
          
      - name: Stop app
        run: |
          # Get package name again
          PACKAGE_NAME=$(aapt dump badging app/build/outputs/apk/debug/app-debug.apk | grep package | awk '{print $2}' | sed "s/name='\(.*\)'/\1/")
          
          echo "üõë Stopping app..."
          adb shell am force-stop "$PACKAGE_NAME"
          echo "App stopped"
          
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          adb kill-server || true
          pkill -f emulator || true