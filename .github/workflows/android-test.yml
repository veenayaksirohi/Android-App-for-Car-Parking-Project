name: Run Android App for 1 Minute
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-app:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: '9477386'
          build-tools-version: '34.0.0'
          platform-version: '34'
          accept-licenses: true
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Build APK
        run: ./gradlew assembleDebug
        
      - name: Create AVD
        run: |
          sdkmanager "system-images;android-30;google_apis;x86_64"
          echo "no" | avdmanager create avd -n test_device -k "system-images;android-30;google_apis;x86_64" --force
          
      - name: Start emulator
        run: |
          export ANDROID_HOME=$ANDROID_SDK_ROOT
          export PATH=$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools
          
          $ANDROID_HOME/emulator/emulator -avd test_device \
            -no-window \
            -no-audio \
            -no-boot-anim \
            -no-snapshot-save \
            -no-snapshot-load \
            -memory 2048 \
            -cores 2 \
            -gpu swiftshader_indirect &
            
          echo "Emulator started"
          
      - name: Wait for emulator
        run: |
          echo "Waiting for emulator to boot..."
          timeout 120s adb wait-for-device
          
          for i in {1..24}; do
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            if [ "$boot_completed" = "1" ]; then
              echo "‚úì Emulator ready"
              break
            fi
            
            if [ $i -eq 24 ]; then
              echo "‚ùå Emulator boot timeout"
              exit 1
            fi
            
            echo "Waiting... ($i/24)"
            sleep 5
          done
          
      - name: Install and run app for 1 minute
        run: |
          # Install the APK
          adb install app/build/outputs/apk/debug/app-debug.apk
          
          # Get package name from AndroidManifest.xml or use your package name
          PACKAGE_NAME=$(aapt dump badging app/build/outputs/apk/debug/app-debug.apk | grep package | awk '{print $2}' | sed "s/name='\(.*\)'/\1/")
          MAIN_ACTIVITY=$(aapt dump badging app/build/outputs/apk/debug/app-debug.apk | grep launchable-activity | awk '{print $2}' | sed "s/name='\(.*\)'/\1/")
          
          echo "Package: $PACKAGE_NAME"
          echo "Main Activity: $MAIN_ACTIVITY"
          
          # Launch the app
          echo "üöÄ Launching app..."
          adb shell am start -n "$PACKAGE_NAME/$MAIN_ACTIVITY"
          
          # Wait a moment for app to start
          sleep 3
          
          # Verify app is running
          if adb shell pidof "$PACKAGE_NAME" > /dev/null; then
            echo "‚úÖ App is running"
          else
            echo "‚ùå App failed to start"
            exit 1
          fi
          
          # Keep app running for exactly 60 seconds
          echo "‚è±Ô∏è  Running app for 60 seconds..."
          
          for i in {1..12}; do
            sleep 5
            elapsed=$((i * 5))
            echo "App running... ${elapsed}s/60s"
            
            # Check if app is still running
            if ! adb shell pidof "$PACKAGE_NAME" > /dev/null; then
              echo "‚ö†Ô∏è  App stopped at ${elapsed}s"
              break
            fi
            
            # Simulate user interaction to keep app active
            if [ $((i % 3)) -eq 0 ]; then
              adb shell input tap 500 1000  # Random tap
            fi
          done
          
          echo "‚úÖ App ran for 60 seconds"
          
      - name: Stop app
        run: |
          # Get package name again
          PACKAGE_NAME=$(aapt dump badging app/build/outputs/apk/debug/app-debug.apk | grep package | awk '{print $2}' | sed "s/name='\(.*\)'/\1/")
          
          echo "üõë Stopping app..."
          adb shell am force-stop "$PACKAGE_NAME"
          echo "App stopped"
          
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          adb kill-server || true
          pkill -f emulator || true